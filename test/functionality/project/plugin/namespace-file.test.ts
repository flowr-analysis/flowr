import { assert, describe, test } from 'vitest';
import path from 'path';
import { FlowrAnalyzerContext } from '../../../../src/project/context/flowr-analyzer-context';


import { arraysGroupBy } from '../../../../src/util/collections/arrays';




import { FlowrInlineTextFile } from '../../../../src/project/context/flowr-file';
import {
	FlowrAnalyzerNamespaceFilePlugin
} from '../../../../src/project/plugins/file-plugins/flowr-analyzer-namespace-file-plugin';
import {
	FlowrAnalyzerPackageVersionsNamespaceFilePlugin
} from '../../../../src/project/plugins/package-version-plugins/flowr-analyzer-package-versions-namespace-file-plugin';


describe('NAMESPACE-file', function() {
	const ctx = new FlowrAnalyzerContext(
		arraysGroupBy([
			new FlowrAnalyzerNamespaceFilePlugin(),
			new FlowrAnalyzerPackageVersionsNamespaceFilePlugin()
		], p => p.type)
	);

	ctx.files.addFiles(new FlowrInlineTextFile(path.resolve('NAMESPACE'), `# Generated by roxygen2 (4.0.2): do not edit by hand
S3method(as.character,expectation)
S3method(compare,character)
export(auto_test)
export(auto_test_package)
export(colourise)
export(context)
exportClasses(ListReporter)
exportClasses(MinimalReporter)
importFrom(methods,setRefClass)
useDynLib(testthat,duplicate_)
useDynLib(testthat,reassign_function)`));
	ctx.files.addRequest({ request: 'file', content: 'pete.R' });
	ctx.resolvePreAnalysis();
	describe.sequential('Parsing', function() {
		test('Library-Versions-Plugin', () => {
			const deps = ctx.deps.getDependency('this');
			assert.isDefined(deps);
			assert.isTrue(deps.namespaceInfo?.loadsWithSideEffects === false);
		});
	});
});